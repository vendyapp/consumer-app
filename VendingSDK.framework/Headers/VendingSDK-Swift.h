// Generated by Apple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
/**
  Status of the vending process at completion.
*/
typedef SWIFT_ENUM(NSInteger, ProcessStatus) {
/**
  Process was successful
*/
  ProcessStatusSuccess = 0,
/**
  Process was failed
*/
  ProcessStatusFail = 1,
/**
  Process was cancelled
*/
  ProcessStatusCancel = 2,
/**
  Got invalid status. This can happen if the process is not any of the other statuses.
*/
  ProcessStatusInvalid = 3,
};

@protocol VendControllerDelegate;

SWIFT_CLASS("_TtC10VendingSDK14VendController")
@interface VendController : NSObject
@property (nonatomic, weak) id <VendControllerDelegate> _Nullable delegate;
/**
  Connect to the device.
  The device is searched first and if the device is found according to the parameters provided in \code
  init
  \endcode method then a connection is established.

  throws:
  \code
  VendError.alreadyConnected
  \endcode exception if the connection is already in progress.
*/
- (BOOL)connectAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Disconnect from the connected device.
  You should wait for \code
  disconnected
  \endcode delegate method before attempting to connect again.
*/
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface VendController (SWIFT_EXTENSION(VendingSDK))
/**
  Approve auth
  \param authApprovalPayload Auth approval payload that will be verified on the device to approve the authorization of the amount requested

*/
- (void)approveAuth:(NSString * _Nonnull)authApprovalPayload;
/**
  Disapprove auth request
*/
- (void)disapprove;
/**
  Keep connection alive. This must be called to keep the connection alive after specific intervals because the connection is short-lived.
*/
- (void)keepAlive;
/**
  Select product on the device.
  \param productId Id of the product to select. This can result in \code
  invalidProduct
  \endcode delegate method to be called if the provided product id is not valid.

*/
- (void)selectProductWithProductId:(NSString * _Nonnull)productId;
@end

enum VendError : NSInteger;
@class NSNumber;

/**
  Vend controller delegate.
  It must be implemented to get the responses of commands sent to the device
*/
SWIFT_PROTOCOL("_TtP10VendingSDK22VendControllerDelegate_")
@protocol VendControllerDelegate <NSObject>
/**
  Device connected
*/
- (void)connected;
/**
  Device disconnected
  \param error Error that caused the disconnected

*/
- (void)disconnected:(enum VendError)error;
/**
  Auth is requested
  \param amount Amount to authorize

  \param token Token for authorization containing the payload. It will be sent to the server for authorization.

*/
- (void)authRequest:(NSNumber * _Nonnull)amount token:(NSString * _Nullable)token;
/**
  Process started
*/
- (void)processStarted;
/**
  Process completed
  \param finalAmount Amount used for the process

  \param processStatus Status of the process

  \param completedPayload Payload. It will be used to mark the process for completion on the server

*/
- (void)processCompleted:(NSNumber * _Nonnull)finalAmount processStatus:(enum ProcessStatus)processStatus completedPayload:(NSString * _Nonnull)completedPayload;
/**
  Invalid product requested
*/
- (void)invalidProduct;
/**
  Timeout warning.
  note:
  You should send \code
  keepAlive
  \endcode commands in this method to keep the connection alive
  seealso:
  Command.keepAlive
*/
- (void)timeoutWarning;
@end

/**
  Vend controller errors
*/
typedef SWIFT_ENUM(NSInteger, VendError) {
/**
  Occurs if the bluetooth is unavailable
*/
  VendErrorBluetoothNotAvailable = 0,
/**
  Occurs if the software revision of the device is not supported
*/
  VendErrorUnsupportedSoftwareRevision = 1,
/**
  Occurs if the device could not be located
*/
  VendErrorDeviceNotLocated = 2,
/**
  Occurs if the device was found properly but it had invalid device id
*/
  VendErrorInvalidDeviceId = 3,
/**
  Occurs if an established connection is timed out
*/
  VendErrorConnectionTimedOut = 4,
/**
  Occurs if the device responded unexpectedly
*/
  VendErrorInvalidDeviceResponse = 5,
/**
  Occurs if the device is already connected to us
*/
  VendErrorAlreadyConnected = 6,
/**
  Occurs if the connection was abruptly closed
*/
  VendErrorUnexpectedDisconnection = 7,
};
static NSString * _Nonnull const VendErrorDomain = @"VendingSDK.VendError";

#pragma clang diagnostic pop
